'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'oneToManyAccessModel',
				optional: false
			},
			{
				name: 'oneToManyAccessModelName',
				optional: true
			},
			{
				name: 'model',
				optional: false
			},
			{
				name: 'dbName',
				optional: false
			},
			{
				name: 'callback',
				optional: true
			},
			{
				name: 'config',
				optional: false
			}
		]
	});

	if (!this.callback) {
		this.callback = () => {
			console.log(`${this.dbName} init has run`);
		}
	}

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	const startSystem = (callback) => {
		this.model.find({
			debugDataVersion: debugDataVersion
		}, (err, result) => {
			if (!result.length) {
				this.initializeDb(callback);
			} else {
				console.log(`test ${this.dbName} is in place`);
			}
		});
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`
shutting down ${__dirname}`);
		callback('', message);
	}

	//API ENDPOINTS ====================================

	//INITIALIZATION ====================================

	const debugDataVersion = 143;

	const sourceList = [
		{
			STUDENTREFID:'Addison_White',
			refId:'ad',
			conditions:[{
				refId: 'ad.1',
				sourceConditionRefId: null,
				title: 'Plan One Condition One',
				diagnoses:[{
					refId: null,
					sourceDiagnosisRefId: null,
					assessment: 'ad.1 assessment',
					nursingDiagnosis: 'ad.1 nursingDiagnosis',
					interventions: 'ad.1 interventions',
					outcomes: 'ad.1 outcomes',
					shortName: 'ad.1 shortName'
				}]
			},{
				refId: 'ad.2',
				sourceConditionRefId: null,
				title: 'Plan One Condition Two',
				diagnoses:[{
					refId: null,
					sourceDiagnosisRefId: null,
					assessment: 'ad.2 assessment',
					nursingDiagnosis: 'ad.2 nursingDiagnosis',
					interventions: 'ad.2 interventions',
					outcomes: 'ad.2 outcomes',
					shortName: 'ad.2 shortName'
				}]
			}]
		},
		{
			STUDENTREFID:'Addison_White',
			refId:'ad2',
			conditions:[{
				refId: 'ad2.1',
				sourceConditionRefId: null,
				title: 'Plan Two Condition One',
				diagnoses:[{
					refId: null,
					sourceDiagnosisRefId: null,
					assessment: 'ad2.1 assessment',
					nursingDiagnosis: 'ad2.1 nursingDiagnosis',
					interventions: 'ad2.1 interventions',
					outcomes: 'ad2.1 outcomes',
					shortName: 'ad2.1 shortName'
				}]
			},{
				refId: 'ad2.2',
				sourceConditionRefId: null,
				title: 'Plan Two Condition Two',
				diagnoses:[{
					refId: null,
					sourceDiagnosisRefId: null,
					assessment: 'ad2.2 assessment',
					nursingDiagnosis: 'ad2.2 nursingDiagnosis',
					interventions: 'ad2.2 interventions',
					outcomes: 'ad2.2 outcomes',
					shortName: 'ad2.2 shortName'
				}]
			}]
		},
		{
			STUDENTREFID:'Emily_White',
			refId:'em',
			conditions:[{
				refId: 'em.1',
				sourceConditionRefId: null,
				title: 'First Condition',
				diagnoses:[{
					refId: null,
					sourceDiagnosisRefId: null,
					assessment: 'em.1 assessment',
					nursingDiagnosis: 'em.1 nursingDiagnosis',
					interventions: 'em.1 interventions',
					outcomes: 'em.1 outcomes',
					shortName: 'em.1 shortName'
				}]
			}]
		}
	];

	const debugDataList = [];
	const accessList = {};
	const debugAccessList = [];

	for (var i = 0, len = sourceList.length; i < len; i++) {
		var element = sourceList[i];
		var ownerRefId = element.STUDENTREFID;
		element.refId = element.refId;

		if (typeof (accessList[ownerRefId]) == 'undefined') {
			accessList[ownerRefId] = {
				refId: qtools.newGuid(),
				studentRefId: ownerRefId,
				planRefIdList: []
			}
		}

		accessList[ownerRefId].planRefIdList.push(element.refId);
		delete element.user;
		debugDataList.push(element);
	}

	for (var i in accessList) {
		var element = accessList[i];
		debugAccessList.push(element);
	}

	const addDocument = (callback) => {
		const localCallback = function() {
			addAccess(callback);
		}
		addPrimary(localCallback);

	}

	const addPrimary = (callback) => {

		const taskList = [];

		for (var i = 0, len = debugDataList.length; i < len; i++) {
			var element = debugDataList[i];

			taskList.push(function(item) {
				return (next) => {
					new this.model(item).save(next);
					return;
				}
			}.bind(this)(element));
		}
		async.series(taskList, callback);
		return;
	}
	
	const addAccess = (callback) => {

		const taskList = [];

		for (var i = 0, len = debugAccessList.length; i < len; i++) {
			var element = debugAccessList[i];

			taskList.push(function(item) {
				return (next) => {
					new this.oneToManyAccessModel(item).save(next);
					return;
				}
			}.bind(this)(element));
		}
		async.series(taskList, callback);
		return;
	}

	this.initializeDb = (callback) => {
		if (!this.config || !this.config.database || this.config.database.allowReinit != 'true') {
			callback(`database re-init not allowed for ${this.dbName} on this server`);
			return;
		}

		console.log(`Clearing ${this.dbName} database`);
		this.model.remove({}, (err, result) => {

			this.oneToManyAccessModel.remove({}, (err, result) => {
				var tmp = new this.model({
					debugDataVersion: debugDataVersion
				});
				tmp.save(() => {
					console.log('updated debugDataVersion to ' + debugDataVersion);

					this.model.count((err, result) => {
						console.log(`INITIALIZING: TEST ${this.dbName.toUpperCase()} ${this.oneToManyAccessModelName && this.oneToManyAccessModelName.toUpperCase()}`);
						addDocument(callback);
					});
				});
			});
		});

	};

	startSystem(this.callback);

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

