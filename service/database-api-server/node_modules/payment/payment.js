'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

const authorizeAppGen = require('./lib/authorize-app.js');

const asynchronousPipe = require('asynchronous-pipe');
//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const authorizeApp = new authorizeAppGen({ config: this.config });

	const moduleName = qtools.ping().employer;
	let workerList = {};
	
	//for laziness sake, this list is not exchanged with the UI. It is duplicated
	//in store.js. Remember to keep them both the same. Sorry, tqii
	const productList = [
		{
			code: 1,
			name: 'One month',
			price: '20.00',
			role: 'nurse',
			months: 1
		},
		{
			code: 3,
			name: 'Three Months',
			price: '55.00',
			role: 'nurse',
			months: 3
		},
		{
			code: 6,
			name: 'Six Months',
			price: '100.00',
			role: 'nurse',
			months: 6
		},
		{
			code: 12,
			name: 'One Year',
			price: '180.00',
			role: 'nurse',
			months: 12
		}
	];

	//LOCAL FUNCTIONS ====================================

	const startSystem = () => {
		this.initCallback && this.initCallback();
	};

	const processPo = (args, callback) => {
		const { poInfo, ccInfo, userInfo, usePurchaseOrder, productInfo } = args;
		callback('', {
			category: 'purchase order',
			summaryString: 'PO number, auth name, PO result',
			number: qtools.newGuid()
		});
	};
	
	const processPayment = (args, callback) => {
		const { poInfo, ccInfo, userInfo, usePurchaseOrder, productInfo } = args;
		authorizeApp.processCreditCardTransaction(
			args,
			callback
		);
	};
	
	
	const getUser = (args, next) => {
		this.apiManager.getApi('databaseApiServer.bookNumbers.users.getList')(
			{
				refId: args.userInfo.refId
			},
			next
		);
	};

	//MAIN FUNCTION ====================================

	const postItem = (inData, callback) => {
		const taskList = [];

		taskList.push((args, next) => {
			const product = qtools.getByProperty(
				productList,
				'code',
				args.productInfo.code
			);
			if (!product) {
				next(`product code ${args.productInfo.code} is invalid`);
				return;
			}
			args.product = product;
			next('', args);
		});

		taskList.push((args, next) => {
			const localCallback = (err, user) => {
				args.user = user;
				next(err, args);
			};
			getUser(args, localCallback);
		});

		let paymentTask;
		if (inData.usePurchaseOrder == 'true') {
			paymentTask = processPo;
		} else {
			paymentTask = processPayment;
		}
		taskList.push((args, next) => {
			const localCallback = (err, paymentResult) => {
				if (paymentResult.disapprovedOrSomething===true){
					err=`some reason from the paymentResult object`;
				}
				args.paymentResult = paymentResult;
				next(err, args);
			};
			paymentTask(args, localCallback);
		});

		taskList.push((args, next) => {
			const localCallback = (err, incrementResult) => {
				args.incrementResult = incrementResult;
				next(err, args);
			};

			this.apiManager.getApi(
				'databaseApiServer.bookNumbers.users.incrementExpiration'
			)(args.user, args.product.months, localCallback);
		});

		taskList.push((args, next) => {
			const localCallback = (err, transactionResult) => {
				transactionResult.note="transactions are book numbers. db.booknumbers.find({category:/creditcard|purchaseorder/i});"
				args.transactionResult = transactionResult;
				next(err, args);
			};

		taskList.push((args, next) => {
			const localCallback = (err, SCHEDULEEMAILORSOMETHINGRESULT) => {
				args.SCHEDULEEMAILORSOMETHINGRESULT = SCHEDULEEMAILORSOMETHINGRESULT;
				next(err, args);
			};
			localCallback('', 'SCHEDULEEMAILORSOMETHINGRESULT');
		});

			this.apiManager.getApi('databaseApiServer.bookNumbers.recordTransaction')(
				{
					number: args.paymentResult.number,
					summaryString: args.paymentResult.summaryString,
					months: args.product.months,
					role: args.product.role,
					category: args.paymentResult.category,
					userRefId: args.user.refId
				},
				localCallback
			);
		});

		asynchronousPipe(taskList, inData, (err, finalResult) => {
			callback(err, finalResult);
		});
	};
	
	//METHODS AND PROPERTIES ====================================
	
	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	};

	//API ENDPOINTS ====================================

	let route;
	let method;
	
	if (qtools.getSurePath(this, 'config.system.environment') == 'development') {
		route = new RegExp('/' + require('path').parse(module.id).name + '$');
		method = 'get';
		qtools.logDebug(
			`\n\nDEVELOPMENT NOTE: =====\n GET enabled for path ${route}\n========\n\n`
		);
		this.permissionMaster.addRoute(method, route, 'all');
		this.router[method](route, (req, res, next) => {
			res.send(
				`webInit() says, ${
					require('path').parse(module.id).name
				}.js is up and running at ${req.path}`
			);
		});
	}

	route = new RegExp('payment$');
	method = 'post';
	this.permissionMaster.addRoute(method, route, 'admin editor nurse');

	this.router[method](route, (req, res, next) => {
		postItem(req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					errorObject: err.toString(),
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: [result]
				});
			}
		});
	});

	//INITIALIZATION ====================================

	startSystem();

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

