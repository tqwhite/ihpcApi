'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

const authorizeAppGen = require('./lib/authorize-app.js');
const purchaseOrderAppGen = require('./lib/purchase-order-app.js');

const asynchronousPipe = require('asynchronous-pipe');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const authorizeApp = new authorizeAppGen({ config: this.config });
	const purchaseOrderApp = new purchaseOrderAppGen({ config: this.config });

	const moduleName = qtools.ping().employer;
	let workerList = {};

	//for laziness sake, this list is not exchanged with the UI. It is duplicated
	//in store.js. Remember to keep them both the same. Sorry, tqii
	const productList = [
		{
			code: 1,
			name: 'One month',
			price: '20.00',
			role: 'nurse',
			months: 1
		},
		{
			code: 3,
			name: 'Three Months',
			price: '55.00',
			role: 'nurse',
			months: 3
		},
		{
			code: 6,
			name: 'Six Months',
			price: '100.00',
			role: 'nurse',
			months: 6
		},
		{
			code: 12,
			name: 'One Year',
			price: '180.00',
			role: 'nurse',
			months: 12
		}
	];

	//LOCAL FUNCTIONS ====================================
	
	
	const checkCcInfo = pmtInfo => {
		let name;
		const errorList = [];

		const checkValidation = fieldName => {
			const fieldLabel = fieldName;
			console.dir({ 'pmtInfo [payment.js.moduleFunction]': pmtInfo });
			
			let value = pmtInfo[fieldName];
			console.log('fieldName=' + fieldName + ' [payment.js.moduleFunction]');

			console.log('value=' + value + ' [payment.js.moduleFunction]');

			switch (fieldName) {
				case 'opaqueData':
					if (!value) {
						errorList.push({
							fieldName: fieldName,
							errorText:
								'Technical problem with credit card processing (missing nonce). Should never happen.'
						});
						break;
					}

					break;

				case 'number':
					value = value.replace(/[ ]/g, '');
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}
					if (isNaN(+value)) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' can only have digits and spaces'
						});
						break;
					}
					if (value.length != 16 && value.length != 12) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must be 16 digits (12 for Amex)'
						});
						break;
					}
					break;
				case 'zip':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}
					if (value.length != 5) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must be 5 digits'
						});
						break;
					}
					break;

				case 'cardCode':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}
					if (value.length != 3 && value.length != 4) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must be 3 digits (4 for Amex)'
						});
						break;
					}
					if (isNaN(+value)) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must be numeric'
						});
						break;
					}
					break;
				case 'name':
					value = value;

					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
					}
					break;

				case 'expMonth':
					value = value;
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}
					if (!value.match(/^\d\d$/) || value < 1 || value > 12) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must be two digits between 01 and 12'
						});
						break;
					}
					break;

				case 'expYear':
					value = value;
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}
					if (!value.match(/^\d\d$/)) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must be two digits'
						});
						break;
					}
					if (
						value < +new Date().toLocaleString('us-en', { year: '2-digit' })
					) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must not be in the past'
						});
						break;
					}
					break;
			}
		};

		['name', 'opaqueData', 'zip'].map(checkValidation);
		return errorList.length ? errorList : '';
	};
	
	const checkPoInfo = pmtInfo => {
		let name;
		const errorList = [];

		const checkValidation = fieldName => {
			const fieldLabel = fieldName;
			let value = pmtInfo[fieldName];

			switch (fieldName) {
				case 'number':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					break;

				case 'authName':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					break;

				case 'authEmail':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					break;

				case 'authPhone':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					break;

				case 'orgName':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					break;

				case 'street':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					break;

				case 'city':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					break;

				case 'state':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}
					const stateList = [
						'AL',
						'NE',
						'AK',
						'NV',
						'AZ',
						'NH',
						'AR',
						'NJ',
						'CA',
						'NM',
						'CO',
						'NY',
						'CT',
						'NC',
						'DE',
						'ND',
						'DC',
						'OH',
						'FL',
						'OK',
						'GA',
						'OR',
						'HI',
						'PA',
						'ID',
						'PR',
						'IL',
						'RI',
						'IN',
						'SC',
						'IA',
						'SD',
						'KS',
						'TN',
						'KY',
						'TX',
						'LA',
						'UT',
						'ME',
						'VT',
						'MD',
						'VA',
						'MA',
						'VI',
						'MI',
						'WA',
						'MN',
						'WV',
						'MS',
						'WI',
						'MO',
						'WY'
					];
					if (!stateList.includes(value.toUpperCase())) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldName + ' must be a two letter state code'
						});
						break;
					}

					break;

				case 'zip':
					if (!value || !value.length) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' cannot be empty'
						});
						break;
					}

					if (value.length != 5) {
						errorList.push({
							fieldName: fieldName,
							errorText: fieldLabel + ' must be 5 digits'
						});
						break;
					}
					break;
			}
		};

		[
			'number',
			'authName',
			'authEmail',
			'authPhone',
			'orgName',
			'street',
			'city',
			'state',
			'zip'
		].map(checkValidation);
		return errorList.length ? errorList : '';
	};

	const startSystem = () => {
		this.initCallback && this.initCallback();
	};

	const processPo = (args, callback) => {
		const { poInfo, ccInfo, userInfo, usePurchaseOrder, productInfo } = args;
		const localCallback = (err, result) => {
			callback('', result);
		};

		const errorList = checkPoInfo(poInfo);

		if (errorList) {
			callback(errorList);
			return;
		}

		purchaseOrderApp.processTransaction(args, localCallback);
	};

	const processPayment = (args, callback) => {
		const { poInfo, ccInfo, userInfo, usePurchaseOrder, productInfo } = args;

		const errorList = checkCcInfo(ccInfo);

		console.dir({ 'errorList [payment.js.moduleFunction]': errorList });
		
		if (errorList) {
			callback(errorList);
			return;
		}
		authorizeApp.processTransaction(args, callback);
	};

	const getUser = (args, next) => {
		this.apiManager.getApi('databaseApiServer.bookNumbers.users.getList')(
			{
				refId: args.userInfo.refId
			},
			next
		);
	};

	//MAIN FUNCTION ====================================

	const postItem = (inData, callback) => {
		const taskList = [];

		taskList.push((args, next) => {
			const product = qtools.getByProperty(
				productList,
				'code',
				args.productInfo.code
			);
			if (!product) {
				next(`product code ${args.productInfo.code} is invalid`);
				return;
			}
			args.product = product;
			next('', args);
		});

		taskList.push((args, next) => {
			const localCallback = (err, user) => {
				args.user = user[0];
				next(err, args);
			};
			getUser(args, localCallback);
		});

		let paymentTask;
		if (inData.usePurchaseOrder == 'true') {
			paymentTask = processPo;
		} else {
			paymentTask = processPayment;
		}
		taskList.push((args, next) => {
			const localCallback = (err, paymentResult) => {
				if (err) {
					callback(err[0].errorText);
					return;
				}
				if (paymentResult.disapprovedOrSomething === true) {
					err = `some reason from the paymentResult object`;
				}
				args.paymentResult = paymentResult;
				next(err, args);
			};
			paymentTask(args, localCallback);
		});

		taskList.push((args, next) => {
			const localCallback = (err, incrementResult) => {
				args.incrementResult = incrementResult;
				next(err, args);
			};
			this.apiManager.getApi(
				'databaseApiServer.bookNumbers.users.incrementExpiration'
			)(args.user, args.product.months, localCallback);
		});

		taskList.push((args, next) => {
			const localCallback = (err, transactionResult) => {
				args.transactionResult = transactionResult.toObject();
				args.transactionResult.note =
					'transactions are book numbers. Use: db.booknumbers.find({category:/authorize|purchaseorder/i});';
				next(err, args);
			};

			this.apiManager.getApi('databaseApiServer.bookNumbers.recordTransaction')(
				{
					number: qtools.getSurePath(
						args,
						'paymentResult.bookNumberParameters.number'
					),
					summaryString: qtools.getSurePath(
						args,
						'paymentResult.bookNumberParameters.summaryString'
					),
					months: args.product.months,
					role: args.product.role,
					category: qtools.getSurePath(
						args,
						'paymentResult.bookNumberParameters.category'
					),
					userRefId: qtools.getSurePath(args, 'user.refId')
				},
				localCallback
			);
		});

		taskList.push((args, next) => {
			const localCallback = (err, SCHEDULEEMAILORSOMETHINGRESULT) => {
				args.SCHEDULEEMAILORSOMETHINGRESULT = SCHEDULEEMAILORSOMETHINGRESULT;
				next(err, args);
			};
			localCallback('', 'SCHEDULEEMAILORSOMETHINGRESULT');
		});

		asynchronousPipe(taskList, inData, (err, finalResult) => {
			qtools.dump({ finalResult: finalResult });

			callback(err, finalResult);
		});
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	};

	//API ENDPOINTS ====================================

	let route;
	let method;

	if (qtools.getSurePath(this, 'config.system.environment') == 'development') {
		route = new RegExp('/' + require('path').parse(module.id).name + '$');
		method = 'get';
		qtools.logDebug(
			`\n\nDEVELOPMENT NOTE: =====\n GET enabled for path ${route}\n========\n\n`
		);
		this.permissionMaster.addRoute(method, route, 'all');
		this.router[method](route, (req, res, next) => {
			res.send(
				`webInit() says, ${
					require('path').parse(module.id).name
				}.js is up and running at ${req.path}`
			);
		});
	}

	route = new RegExp('payment$');
	method = 'post';
	this.permissionMaster.addRoute(method, route, 'admin editor nurse');

	this.router[method](route, (req, res, next) => {
		postItem(req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					errorObject: err.toString(),
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: [result]
				});
			}
		});
	});

	//INITIALIZATION ====================================

	startSystem();

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

