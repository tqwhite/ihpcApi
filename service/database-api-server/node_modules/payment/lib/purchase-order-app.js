'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'initCallback',
				optional: true
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================
	
	//METHODS AND PROPERTIES ====================================

	const paymentParms = this.config.payment;
	const environment = this.config.system.environment;
	
	const queueEmail = (transaction, partialResult, callback) => {
		const { poInfo, user } = transaction;
		
		const emailCallback = (err, result) => {
			partialResult.emailNotification=result;
			partialResult.bookNumberParameters = {
				number:
					'IHPC'+
					user.username +
					new Date()
						.valueOf()
						.toString().substring(4,13),
				summaryString: `${poInfo.number}|${poInfo.authName}`,
				category: 'purchase-order-app.js'
			};
			callback(err, partialResult);
		}; //note the the number is in authorize-app as invoiceNumber, if one is changed, both should
			emailCallback('', 'purchase order email to someone in accounts receivable');
		
		
	};

	const processTransaction = (transaction, callback) => {
		const partialResult = {
			processDetails: {
				setupDetails: 'not so much'
			}
		};

		queueEmail(transaction, partialResult, callback);
	};

	//API ENDPOINTS ====================================

	this.processTransaction = processTransaction;

	//INITIALIZATION ====================================
	
	!this.initCallback || this.initCallback();

	//ECOSYSTEM REQUIREMENTS ====================================

	const ping = (message = 'NO MESSAGE SUPPLIED') => {
		return `${qtools.ping().employer} got the ${message}`;
	};

	this.ping = ping;

	this.shutdown = (message, callback) => {
		console.log(`\nshutting down ${qtools.ping().employer}`);
		callback('', message);
	};

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

