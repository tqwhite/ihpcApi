'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');
var ApiContracts = require('authorizenet').APIContracts;
var ApiControllers = require('authorizenet').APIControllers;
var SDKConstants = require('authorizenet').Constants;

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'initCallback',
				optional: true
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	const receiveTransactionResultCallback=(ctrl,partialResult, callback)=>{

	return ()=>{

		var apiResponse = ctrl.getResponse();

		var response = new ApiContracts.CreateTransactionResponse(apiResponse);

		let err='';

		if(response != null){
			if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
				if(response.getTransactionResponse().getMessages() != null){
					console.log('Successfully created transaction with Transaction ID: ' + response.getTransactionResponse().getTransId());
					console.log('Response Code: ' + response.getTransactionResponse().getResponseCode());
					console.log('Message Code: ' + response.getTransactionResponse().getMessages().getMessage()[0].getCode());
					console.log('Description: ' + response.getTransactionResponse().getMessages().getMessage()[0].getDescription());
				}
				else {
					err='Failed Transaction.';
					if(response.getTransactionResponse().getErrors() != null){
					qtools.logWarn('Error Code1: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()+'; Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText());
						err=response.getTransactionResponse().getErrors().getError()[0].getErrorText();
					
					}
				}
			}
			else {
					err='Failed Transaction.';
					qtools.logWarn('Error Code2: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()+'; Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText());
				if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
						err=response.getTransactionResponse().getErrors().getError()[0].getErrorText();

				}
				else {
					qtools.logWarn('Error Code: ' + response.getMessages().getMessage()[0].getCode()+'; Error message: ' + response.getMessages().getMessage()[0].getText());
					err=response.getTransactionResponse().getErrors().getError()[0].getErrorText();
				}
			}
		}
		else {
			err='Null Response from Authorize.net';
		}
		response.paymentProcess='authorize-app.js';
		partialResult.response=response;
		callback(err, partialResult);

	}}

	//METHODS AND PROPERTIES ====================================

	const paymentParms=this.config.payment;
	const envrionment=this.config.system.environment;

	const processCreditCardTransaction = (transaction, callback) => {'use strict';
		const { ccInfo, productInfo, userInfo, product, user } = transaction;

var ApiContracts = require('authorizenet').APIContracts;
var ApiControllers = require('authorizenet').APIControllers;
var SDKConstants = require('authorizenet').Constants;

	var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
		merchantAuthenticationType.setName(paymentParms.authorize.apiLoginKey);
		merchantAuthenticationType.setTransactionKey(paymentParms.authorize.transactionKey);

	var opaqueData = new ApiContracts.OpaqueDataType();
		opaqueData.setDataDescriptor(ccInfo.opaqueData.dataDescriptor);
		opaqueData.setDataValue(ccInfo.opaqueData.dataValue);

	var paymentType = new ApiContracts.PaymentType();
	paymentType.setOpaqueData(opaqueData);

	var orderDetails = new ApiContracts.OrderType();
	orderDetails.setInvoiceNumber(user.username+qtools.getDateString('dd_MMM_yyyy').replace(/\//g,'')+new Date().valueOf().toString().substring(9,13));
	orderDetails.setDescription(product.name);

	var billTo = new ApiContracts.CustomerAddressType();
	billTo.setAddress(ccInfo.street);
	billTo.setCity(ccInfo.city);
	billTo.setState(ccInfo.state);
	billTo.setZip(ccInfo.zip);

	var transactionRequestType = new ApiContracts.TransactionRequestType();
	transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
	transactionRequestType.setPayment(paymentType);
	transactionRequestType.setAmount(+product.price+Math.floor(Math.random()*100)/100); //transactionRequestType.setAmount(product.price);
	transactionRequestType.setOrder(orderDetails);
	transactionRequestType.setBillTo(billTo);

	var createRequest = new ApiContracts.CreateTransactionRequest();
	createRequest.setMerchantAuthentication(merchantAuthenticationType);
	createRequest.setTransactionRequest(transactionRequestType);

	const CreateTransactionRequest=createRequest;

	var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
	//Defaults to sandbox
	//ctrl.setEnvironment(SDKConstants.endpoint.production);

	ctrl.execute(receiveTransactionResultCallback(ctrl, {CreateTransactionRequest}, callback));
};

	//API ENDPOINTS ====================================

	this.processCreditCardTransaction = processCreditCardTransaction;

	//INITIALIZATION ====================================

	console.log(__dirname);

	!this.initCallback || this.initCallback();

	//ECOSYSTEM REQUIREMENTS ====================================

	const ping = (message = 'NO MESSAGE SUPPLIED') => {
		return `${qtools.ping().employer} got the ${message}`;
	};

	this.ping = ping;

	this.shutdown = (message, callback) => {
		console.log(`\nshutting down ${qtools.ping().employer}`);
		callback('', message);
	};

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

