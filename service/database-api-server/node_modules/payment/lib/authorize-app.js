'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');
var ApiContracts = require('authorizenet').APIContracts;
var ApiControllers = require('authorizenet').APIControllers;

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'initCallback',
				optional: true
			}
		]
	});

	//LOCAL VARIABLES ====================================
	

	//LOCAL FUNCTIONS ====================================
	
	//METHODS AND PROPERTIES ====================================
	
	const paymentParms=this.config.payment;
	const envrionment=this.config.system.environment;

	
	const processCreditCardTransaction = (transaction, callback) => {
		
		const { ccInfo, productInfo, userInfo, product } = transaction;
	
qtools.dump({"ccInfo [authorize-app.js.moduleFunction]":ccInfo});

console.dir({"productInfo [authorize-app.js.moduleFunction]":productInfo});

console.dir({"userInfo [authorize-app.js.moduleFunction]":userInfo});



	
const merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
		merchantAuthenticationType.setName(paymentParms.authorize.apiLoginKey);
		merchantAuthenticationType.setTransactionKey(paymentParms.authorize.transactionKey);
		
	const opaqueData = new ApiContracts.OpaqueDataType();
		opaqueData.setDataDescriptor(ccInfo.opaqueData.dataDescriptor);
		opaqueData.setDataValue(ccInfo.opaqueData.dataValue);
	

	const paymentType = new ApiContracts.PaymentType();
		paymentType.setOpaqueData(opaqueData);
		
		callback('', {
			category: 'creditcard',
			amountPaid:product.price,
			summaryString:
				'Xlast four, name on card, authorize.code, authorize.transactionId',
			number: qtools.newGuid()
		});
		
		
		
	};
	
	//API ENDPOINTS ====================================
	
	this.processCreditCardTransaction = processCreditCardTransaction;
	
	//INITIALIZATION ====================================

	console.log(__dirname);
	
	!this.initCallback || this.initCallback();

	//ECOSYSTEM REQUIREMENTS ====================================
	
	const ping = (message = 'NO MESSAGE SUPPLIED') => {
		return `${qtools.ping().employer} got the ${message}`;
	};
	
	this.ping = ping;

	this.shutdown = (message, callback) => {
		console.log(`\nshutting down ${qtools.ping().employer}`);
		callback('', message);
	};

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

