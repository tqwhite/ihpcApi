'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');
var ApiContracts = require('authorizenet').APIContracts;
var ApiControllers = require('authorizenet').APIControllers;
var SDKConstants = require('authorizenet').Constants;

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'initCallback',
				optional: true
			}
		]
	});

	//LOCAL VARIABLES ====================================

	const paymentParms = this.config.payment;
	const processorChoice = this.config.payment.processorChoice;



	//LOCAL FUNCTIONS ====================================
	
	const constructTransactionSummaryString = args => {
		return (
			'authCode:' +
			qtools.getSurePath(
				args,
				'processDetails.response.transactionResponse.authCode',
				'!authCode'
			) +
			'|' +
			('transId:' +
				qtools.getSurePath(
					args,
					'processDetails.response.transactionResponse.transId',
					'!transId'
				)) +
			'|' +
			('cardInfo:' +
				qtools.getSurePath(
					args,
					'processDetails.response.transactionResponse.accountType',
					'!accountType'
				) +
				qtools.getSurePath(
					args,
					'processDetails.response.transactionResponse.accountNumber',
					'!accountNumber'
				)) +
			'|' +
			('code:' +
				qtools.getSurePath(
					args,
					'processDetails.response.transactionResponse.messages.message[0].code',
					'!code'
				)) +
			'|' +
			('description:' +
				qtools.getSurePath(
					args,
					'processDetails.response.transactionResponse.messages.message[0].description',
					'!description'
				))
		);
	};

	const receiveTransactionResultCallback = (ctrl, partialResult, callback) => {
		return () => {
			const apiResponse = ctrl.getResponse();

			const response = new ApiContracts.CreateTransactionResponse(apiResponse);

			let err = '';
			// prettier-ignore
			if(response != null){
				if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
					if(response.getTransactionResponse().getMessages() != null){
						qtools.logMilestone('Successfully created transaction with Transaction ID: ' + response.getTransactionResponse().getTransId());
						qtools.logMilestone('Response Code: ' + response.getTransactionResponse().getResponseCode());
						qtools.logMilestone('Message Code: ' + response.getTransactionResponse().getMessages().getMessage()[0].getCode());
						qtools.logMilestone('Description: ' + response.getTransactionResponse().getMessages().getMessage()[0].getDescription());
					}
					else {
						err='Failed Transaction.';
						if(response.getTransactionResponse().getErrors() != null){
							qtools.logWarn('Error Code 1: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()+'; Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText());
							err=response.getTransactionResponse().getErrors().getError()[0].getErrorText();
						}
					}
				}
				else {
					err='Failed Transaction.';
					if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
						qtools.logWarn('Error Code 2: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()+'; Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText());
						err=response.getTransactionResponse().getErrors().getError()[0].getErrorText();
					}
					else {
						qtools.logWarn('Error Code: ' + response.getMessages().getMessage()[0].getCode()+'; Error message: ' + response.getMessages().getMessage()[0].getText());
						err=response.getTransactionResponse().getErrors().getError()[0].getErrorText();
					}
				}
		}
		else {
			err='Null Response from Authorize.net';
		}
			response.paymentProcess = 'authorize-app.js';
			partialResult.processDetails.response = response;
			partialResult.bookNumberParameters = {
				number: qtools.getSurePath(
					partialResult,
					'processDetails.request.transactionRequest.order.invoiceNumber',
					'missing invoice number'
				),
				summaryString: constructTransactionSummaryString(partialResult),
				category: 'authorize-app.js'
			};
			callback(err, partialResult);
		};
	};

	//METHODS AND PROPERTIES ====================================

	// prettier-ignore
	const processTransaction = (transaction, callback) => {
		const { ccInfo, productInfo, userInfo, product, user } = transaction;

		const ApiContracts = require('authorizenet').APIContracts;
		const ApiControllers = require('authorizenet').APIControllers;
		const SDKConstants = require('authorizenet').Constants;
		
		const apiLoginKey=paymentParms.keys[processorChoice].authorizeApiLoginKey;
		const transactionKey=paymentParms.keys[processorChoice].transactionKey;
console.log("processorChoice="+processorChoice+" [authorize-app.js.moduleFunction]");

console.log("apiLoginKey="+apiLoginKey+" [authorize-app.js.moduleFunction]");
console.log("transactionKey="+transactionKey+" [authorize-app.js.moduleFunction]");



		const merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
			merchantAuthenticationType.setName(apiLoginKey);
			merchantAuthenticationType.setTransactionKey(transactionKey);

		const opaqueData = new ApiContracts.OpaqueDataType();
			opaqueData.setDataDescriptor(ccInfo.opaqueData.dataDescriptor);
			opaqueData.setDataValue(ccInfo.opaqueData.dataValue);

		const paymentType = new ApiContracts.PaymentType();
			paymentType.setOpaqueData(opaqueData);

		const orderDetails = new ApiContracts.OrderType();
		const invoiceNumber='IHPC'+user.username+new Date().valueOf().toString().substring(4,13);
		

			orderDetails.setInvoiceNumber(invoiceNumber.substr(0,15));
			orderDetails.setDescription(product.name);
			 //note the the setInvoiceNumber is in purchase-order-app as number, if one is changed, both should

		const billTo = new ApiContracts.CustomerAddressType();
			billTo.setZip(ccInfo.zip);

		const transactionRequestType = new ApiContracts.TransactionRequestType();
			transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
			transactionRequestType.setPayment(paymentType);
			transactionRequestType.setAmount(product.price);
			transactionRequestType.setOrder(orderDetails);
			transactionRequestType.setBillTo(billTo);

		const createRequest = new ApiContracts.CreateTransactionRequest();
			createRequest.setMerchantAuthentication(merchantAuthenticationType);
			createRequest.setTransactionRequest(transactionRequestType);

		const CreateTransactionRequest=createRequest;
		
		const ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
		//Defaults to sandbox
		//
		
		if (processorChoice=='production'){
			qtools.logWarn(`NOTE: using authorize.net PRODUCTION processor ${SDKConstants.endpoint.production}`);
			ctrl.setEnvironment(SDKConstants.endpoint.production);
		}


		ctrl.execute(receiveTransactionResultCallback(ctrl, {processDetails:{request:CreateTransactionRequest}}, callback));
	};

	//API ENDPOINTS ====================================

	this.processTransaction = processTransaction;

	//INITIALIZATION ====================================
	
	!this.initCallback || this.initCallback();

	//ECOSYSTEM REQUIREMENTS ====================================

	const ping = (message = 'NO MESSAGE SUPPLIED') => {
		return `${qtools.ping().employer} got the ${message}`;
	};

	this.ping = ping;

	this.shutdown = (message, callback) => {
		qtools.logMilestone.log(`\nshutting down ${qtools.ping().employer}`);
		callback('', message);
	};

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

