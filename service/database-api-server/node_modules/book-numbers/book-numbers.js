'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
//const crypt=require('crypto');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const mongoose = this.mongoose;

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	}
	

	const checkBookNumberAvailability = (registerArgs, callback) => {
		const localCallback = (err, result) => {

			if (err) {
				callback(err);
				return;
			}
			if (!result.length) {
				callback({
					errmsg: 'No such book number'
				});
				return;
			}
			if (result[0].userRefId) {
				callback({
					errmsg: 'Book number already used'
				});
				return;
			}

			callback('', result[0]._id);


		}

		getOne(registerArgs.bookNumber.toUpperCase(), localCallback);
	}
	
	const updateBookNumber=(_id, userRefId, callback)=>{
		putItem(_id, {userRefId:userRefId}, callback)
	}

	//LOCAL FUNCTIONS ====================================
	
	const getOne=(number, callback)=>{
		BookNumber.find({number:number}, callback);
	}

	const getList = (criteria, callback) => {
		BookNumber.find(criteria, callback);

	}

	const putItem = function(id, inData, callback) {
		BookNumber.update({
			_id: id
		}, inData, {}, callback);
	}

	const postItem = function(inData, callback) {
		var item = new BookNumber(inData);
		item.save(callback);
	}

	const deleteItem = function(id, callback) {
		BookNumber.remove({
			_id: id
		}, callback);
	}

	//API ENDPOINTS ====================================
	let route;
	let method;

	route = new RegExp('/bookNumber/reinitialize/(.*)$');
	method='get';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {
		initDb.initializeDb((err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: 'Database access problem (bookNumber.reinitialize()) '+err,
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});


	});

	//INITIALIZATION ====================================

	this.apiManager.registerApi('checkBookNumberAvailability', checkBookNumberAvailability);

	this.apiManager.registerApi('updateBookNumber', updateBookNumber);

	const bookNumberSchema = mongoose.Schema({
		debugDataVersion: String,
		refId: String,
		number: String,
		role: String,
		sequence: Number,
		userRefId: String
	},
	{
	  timestamps: true
	});

	const BookNumber = mongoose.model('BookNumber', bookNumberSchema);

	const initDbGen = require('book-numbers-test-db');
	const initDb = new initDbGen({
		model: BookNumber,
		dbName: 'bookNumber',
		config:this.config
	});

	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

