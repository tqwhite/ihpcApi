'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'model',
				optional: false
			},
			{
				name: 'dbName',
				optional: false
			},
			{
				name: 'callback',
				optional: true
			},
			{
				name: 'config',
				optional: false
			}
		]
	});

	if (!this.callback) {
		this.callback = () => {
			console.log(`${this.dbName} init has run`);
		}
	}

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	const startSystem = (callback) => {
		this.model.find({
			debugDataVersion: debugDataVersion
		}, (err, result) => {
			if (!result.length) {
				this.initializeDb(callback);
			} else {
				console.log(`test ${this.dbName} is in place`);
			}
		});
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`
shutting down ${__dirname}`);
		callback('', message);
	}

	//API ENDPOINTS ====================================

	//INITIALIZATION ====================================

	const debugDataVersion = 139;
	let bookNumbers = [];
	const bookNumbersPath = process.env.srapiProjectPath + '/management/bookNumbers/bookNumbers.txt';
	if (qtools.realPath(bookNumbersPath)) {
		const bookFileData = qtools.fs.readFileSync(bookNumbersPath);
		bookNumbers = bookFileData.toString().split('\n')
	}
	const debugDataList = [];

	var createDebugDataList = () => {
		let newItem;

		for (var i = 0, len = bookNumbers.length; i < len; i++) {
			var element = bookNumbers[i];
			debugDataList.push({
				refId: qtools.newGuid(),
				number: element
			});

		}

	}
	createDebugDataList();

	let debugDataInx = 0;

	const addDocument = (callback) => {
		var model = new this.model(debugDataList[debugDataInx]);

		debugDataInx = debugDataInx + 1;
		model.save((err, result) => {
			if (err) {
				return console.error(err);
			}
			if (debugDataInx < debugDataList.length) {
				setTimeout(addDocument, 100, callback);
			} else {
				if (callback) {
					callback(err, result);
				}
			}
		});

	}
	this.initializeDb = (callback) => {
		if (!this.config || !this.config.database || this.config.database.allowReinit != 'true') {
			callback(`database re-init not allowed for ${this.dbName} on this server`);
			return;
		}

		debugDataInx = 0;
		console.log(`Clearing ${this.dbName} database`);
		this.model.remove({}, (err, result) => {
			var tmp = new this.model({
				debugDataVersion: debugDataVersion
			});
			tmp.save(() => {
				console.log('updated debugDataVersion to ' + debugDataVersion);
			});
			this.model.count((err, result) => {
				console.log(`INITIALIZING: TEST ${this.dbName.toUpperCase()}`);
				addDocument(callback);
			});
		});

	};

	startSystem(this.callback);

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

