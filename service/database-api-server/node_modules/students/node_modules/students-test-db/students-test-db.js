'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'oneToManyAccessModel',
				optional: false
			},
			{
				name: 'oneToManyAccessModelName',
				optional: true
			},
			{
				name: 'model',
				optional: false
			},
			{
				name: 'dbName',
				optional: false
			},
			{
				name: 'callback',
				optional: true
			},
			{
				name: 'config',
				optional: false
			}
		]
	});

	if (!this.callback) {
		this.callback = () => {
			console.log(`${this.dbName} init has run`);
		}
	}

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	const startSystem = (callback) => {
		this.model.find({
			debugDataVersion: debugDataVersion
		}, (err, result) => {
			if (!result.length) {
				this.initializeDb(callback);
			} else {
				console.log(`test ${this.dbName} is in place`);
			}
		});
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`
shutting down ${__dirname}`);
		callback('', message);
	}

	//API ENDPOINTS ====================================

	//INITIALIZATION ====================================

	const debugDataVersion = 139;

	const sourceList = [
		{
			first: 'Sally',
			last: 'Smith',
			USERREFID: 'admin2'
		},
		{
			first: 'Jerry',
			last: 'Jones',
			USERREFID: 'admin2'
		},
		{
			first: 'Holly',
			last: 'Helper',
			USERREFID: 'admin2'
		},
		{
			first: 'Emily',
			last: 'White',
			"gTwoPhoneMain" : "888-888-8888", 
			"gTwoZip" : "", 
			"gTwoState" : "", 
			"gTwoCity" : "", 
			"gTwoStreet2" : "", 
			"gTwoStreet1" : "someplace else", 
			"gTwoName" : "TQ White II", 
			"gTwoRelationship" : "father", 
			"gOnePhoneMain" : "999-999-9999", 
			"gOneZip" : "", 
			"gOneState" : "", 
			"gOneCity" : "", 
			"gOneStreet2" : "", 
			"gOneStreet1" : "same as student", 
			"gOneName" : "Kaye White", 
			"gOneRelationship" : "mother", 
			"eap" : true, 
			"504plan" : false, 
			"eep" : false, 
			"iep" : true, 
			"IDC9CM" : "", 
			"hcTwoEmailAdr" : "", 
			"hcTwoPhone" : "", 
			"hcTwoName" : "", 
			"hcOneEmailAdr" : "ds@example.com", 
			"hcOnePhone" : "000-000-0000", 
			"hcOneName" : "Dr Smith", 
			"teacher" : "Ms Arbetman", 
			"school" : "Horace Mann", 
			"idNumber" : "9999999", 
			"gender" : "female", 
			"birthday" : "11/27/89", 
			"phone" : "708-763-0100", 
			"zip" : "55364", 
			"state" : "MN", 
			"city" : "Mound", 
			"street2" : "", 
			"street1" : "5004 Three Points Blvd", 
			"middle" : "P",
			USERREFID: 'admin'
		},
		{
			first: 'Addison',
			last: 'White',
			USERREFID: 'admin'
		},
	];

	const debugDataList = [];
	const accessList = {};
	const debugAccessList = [];

	for (var i = 0, len = sourceList.length; i < len; i++) {
		var element = sourceList[i];
		var userRefId = element.USERREFID + '_refid';
		element.refId = element.first + '_' + element.last;

		if (typeof (accessList[userRefId]) == 'undefined') {
			accessList[userRefId] = {
				refId: qtools.newGuid(),
				userRefId: userRefId,
				studentRefIdList: []
			}
		}

		accessList[userRefId].studentRefIdList.push(element.refId);
		delete element.user;
		debugDataList.push(element);
	}

	for (var i in accessList) {
		var element = accessList[i];
		debugAccessList.push(element);
	}

	const addDocument = (callback) => {
		const localCallback = function() {
			addAccess(callback);
		}
		addUsers(localCallback);

	}

	const addUsers = (callback) => {

		const taskList = [];

		for (var i = 0, len = debugDataList.length; i < len; i++) {
			var element = debugDataList[i];

			taskList.push(function(item) {
				return (next) => {
					new this.model(item).save(next);
					return;
				}
			}.bind(this)(element));
		}
		async.series(taskList, callback);
		return;
	}
	
	const addAccess = (callback) => {

		const taskList = [];

		for (var i = 0, len = debugAccessList.length; i < len; i++) {
			var element = debugAccessList[i];

			taskList.push(function(item) {
				return (next) => {
					new this.oneToManyAccessModel(item).save(next);
					return;
				}
			}.bind(this)(element));
		}
		async.series(taskList, callback);
		return;
	}

	this.initializeDb = (callback) => {
		if (!this.config || !this.config.database || this.config.database.allowReinit != 'true') {
			callback(`database re-init not allowed for ${this.dbName} on this server`);
			return;
		}

		console.log(`Clearing ${this.dbName} database`);
		this.model.remove({}, (err, result) => {

			this.oneToManyAccessModel.remove({}, (err, result) => {
				var tmp = new this.model({
					debugDataVersion: debugDataVersion
				});
				tmp.save(() => {
					console.log('updated debugDataVersion to ' + debugDataVersion);

					this.model.count((err, result) => {
						console.log(`INITIALIZING: TEST ${this.dbName.toUpperCase()} ${this.oneToManyAccessModelName && this.oneToManyAccessModelName.toUpperCase()}`);
						addDocument(callback);
					});
				});
			});
		});

	};

	startSystem(this.callback);

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

