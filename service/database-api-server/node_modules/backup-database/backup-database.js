'use strict';
const moduleName = __filename.replace(__dirname + '/', '').replace(/.js$/, ''); //this just seems to come in handy a lot
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');
const exec = require('child_process').exec;
const later = require('later');
const fse = require('fs-extra');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: true
			},
			{
				name: 'initCallback',
				optional: true
			}
		]
	});

	//LOCAL VARIABLES ====================================
	
	const mongoPort = qtools.getSurePath(args, 'config.database.mongoPort');

	//LOCAL FUNCTIONS ====================================

	const startSystem = () => {
		const startList = [];

		startList.push(done => {
			this.initializeBackups(done);
		});

		async.series(startList, () => {
			this.initCallback && this.initCallback();
		});
	};

	this.initializeBackups = callback => {
		var schedule = {
			schedules: [
				{
					h: [6],
					m: [0]
				}
			],
			exceptions: []
		};
		//	var schedule = later.parse.text('every 3 secs');

		var timer2 = later.setInterval(backupMongo, schedule);
		callback();
	};

	const backupMongo = () => {
		if (!process.env.srapiBackupsPath) {
			console.log(
				'NO DATABASE BACKUP. Environment var srapiBackupsPath is not defined for ' +
					this.config.system.name +
					'.'
			);
			return;
		}

		const dateString = qtools.getDateString('allFieldsPaddedDots');
		const backupPath = this.mongodBackupDir + 'mongoDb_' + dateString + '/';

		const portString = mongoPort ? `--port=${mongoPort}` : '25250';

		const cmd = `mongodump ${portString} --out=` + backupPath;
		console.log(`backup cmd: ${cmd} [${moduleName}]`);
		//		cmd='ls /safdsa/asdf';
		this.midBackup = true;
		exec(cmd, (err, stdout, stderr) => {
			if (!err) {
				console.log(
					'Successful Mongo Backup: backupPath=' +
						backupPath +
						' for ' +
						this.config.system.name
				);
			} else {
				const m1 =
					'FAILED Mongo Backup: backupPath=' +
					backupPath +
					' for ' +
					this.config.system.name +
					'=====START';
				const m2 = '\n\n---err=' + err;
				const m3 = '\n\n---stderr=' + stderr;
				const m4 = 'FAILED Mongo Backup: backupPath=' + backupPath + '=====END';
				console.log(m1);
				console.log(m2);
				console.log(m3);
				console.log(m4);

				const errPath =
					process.env.srapiBackupsPath +
					'mongoDb/mongoDb_' +
					dateString +
					'_FAILED_BACKUP.txt';
				const errMessage = m1 + m2 + m3 + m4;
				qtools.writeSureFile(errPath, errMessage);
			}
			purgeOlder();
			this.midBackup = false;
		});
	};

	const purgeOlder = () => {
		if (!this.mongodBackupDir) {
			return;
		}
		const dirData = fse.readdirSync(this.mongodBackupDir);
		const excess = dirData.length - this.mongoBackupCount;
		if (excess) {
			let fileName;
			let filePath;
			for (var i = 0; i < excess; i++) {
				fileName = dirData.shift();
				filePath = this.mongodBackupDir + fileName;
				fse.removeSync(filePath);
				console.log(
					'PURGING backup set ' + filePath + ' for ' + this.config.system.name
				);
			}
		}
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		if (this.midBackup) {
			setTimeout(this.shutdown, 1000);
			return;
		}
		console.log(`
shutting down ${__dirname}`);
		callback('', message);
	};

	//API ENDPOINTS ====================================

	//INITIALIZATION ====================================

	if (process.env.srapiBackupsPath) {
		this.mongodBackupDir = process.env.srapiBackupsPath + 'mongoDb/';
		this.mongoBackupCount = this.config.database.backupCount
			? this.config.database.backupCount
			: 4;
	}

	startSystem();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

