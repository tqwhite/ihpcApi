'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');
const later=require('later');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'placeholder',
				optional: true
			},
			{
				name: 'initCallback',
				optional: true
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	const startSystem = () => {

		if (typeof (COMPONENT) == 'undefined') {
			this.initCallback && this.initCallback();
			return;
		}

		const startList = [];

		startList.push((done) => {
			const workerName = 'utilityServer'
			new COMPONENT({
				initCallback: function() {
					workerList[workerName] = this; done();
				}
			});
		});

		async.series(startList, () => {
			this.initCallback && this.initCallback();
		});
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`
shutting down ${__dirname}`);
		callback('', message);
	}

	//API ENDPOINTS ====================================

	//INITIALIZATION ====================================
	
	
	// http://nodejs.org/api.html#_child_processes

const sys = require('util')
const exec = require('child_process').exec;

let cmd;

const callback = (cmd) => {
	return (error, stdout, stderr) => {
		console.log("cmd '" + cmd + "'");
		console.log("\nerror=" + error);
		console.log("stderr=" + stderr);

		console.log("\nstdout " + stdout);
		console.log('=========');

	}
}


cmd="mongodump --out="+process.env.srapiProjectPath+"../mongoBackup";

//exec(cmd, callback(cmd));

	console.log(__dirname);
	startSystem();
	
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

