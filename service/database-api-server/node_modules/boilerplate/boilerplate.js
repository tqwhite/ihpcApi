'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const path = require('path');
//const crypt=require('crypto');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const mongoose = this.mongoose;

	//LOCAL FUNCTIONS ====================================

	const conditionStaticFileDb = {
		byConditionShortName: {},
		addPath: function(urlSegment) {
			const pathBits = path.parse(urlSegment.toString());
			const dottedPath = pathBits.dir.replace('/', '.');
			if (!dottedPath || !dottedPath.match(/\./)) {
				return;
			}
			let container = qtools.getSurePath(this.byConditionShortName, dottedPath);
			if (!container) {
				qtools.putSurePath(this.byConditionShortName, dottedPath, []);
				container = qtools.getSurePath(this.byConditionShortName, dottedPath);
			}
			container.push(
				{
					filename: pathBits.base,
					urlSegment: urlSegment
				}
			);
		},
		getCondition: function(name) {
			if (typeof (name) != 'string') {
				return;
			}
			return this.byConditionShortName[name.replace(/\W/g, '')];
		}
	}

	const registerStaticPath = (urlSegment) => {
		conditionStaticFileDb.addPath(urlSegment.toString());
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	}

	const getList = (criteria, callback) => {
		const localCallback = (err, result) => {
			if (err) {
				callback(err);
				return;
			}
			const newResult = []
			result.forEach((item) => {
				const outObj = item.toObject()
				outObj.staticFiles = item.staticFiles
				newResult.push(outObj)
			});
			callback('', newResult);
		}
		Boilerplate.find(criteria, localCallback).sort('shortName');
	}

	const putItem = function(id, inData, callback) {
		Boilerplate.update({
			_id: id
		}, inData, {}, callback);
	}

	const postItem = function(inData, callback) {
		var item = new Boilerplate(inData);
		item.save(callback);
	}

	const deleteItem = function(id, callback) {
		Boilerplate.remove({
			_id: id
		}, callback);
	}

	//API ENDPOINTS ====================================
	let route;
	let method;

	route = new RegExp('/boilerplate$');
	method = 'get';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {

		getList({}, (err, users) => {
			if (err) {
				next({
					code: '500',
					errorText: 'Database access problem (boilerplate.get())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: users
				});
			}
		});

	});

	route = new RegExp('boilerplate/(.*)$');
	method = 'put';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {

		putItem(req.params[0], req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: 'Database access problem (boilerplate.put())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	route = new RegExp('boilerplate$');
	method = 'post';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {

		postItem(req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: 'Database access problem (boilerplate.post())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: [result]
				});
			}
		});

	});

	route = new RegExp('boilerplate/(.*)$');
	method = 'delete';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {

		deleteItem(req.params[0], (err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: 'Database access problem (boilerplate.delete())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	route = new RegExp('/boilerplate/reinitialize/(.*)$');
	method = 'get';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {
		initDb.initializeDb((err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: 'Database access problem (boilerplate.reinitialize()) ' + err,
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	//INITIALIZATION ====================================
	this.apiManager.registerApi('registerStaticPath', registerStaticPath);

	const boilerplateSchema = mongoose.Schema({
		shortName: String,
		refId: String,
		title: String,
		debugDataVersion: String,
		diagnoses: [
			{
				refId: String,
				assessmentData: String,
				nursingDiagnosis: String,
				interventions: String,
				outcomes: String,
				shortName: String,
				includeByDefault: Boolean
			}
		],
	},
		{
			timestamps: true,
			toObject: {
				virtuals: true
			},
			toJSON: {
				virtuals: true
			}
		});

	
	boilerplateSchema.index({refId: 1, unique:true});
	
	boilerplateSchema.virtual('staticFiles').get(function() {
		return conditionStaticFileDb.getCondition(this.shortName);
	});

	const Boilerplate = mongoose.model('Boilerplate', boilerplateSchema);

// 	const initDbGen = require('boilerplate-test-db');
// 	const initDb = new initDbGen({
// 		model: Boilerplate,
// 		dbName: 'boilerplate',
// 		config: this.config
// 	});

	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

