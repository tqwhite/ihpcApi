'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
//const crypt=require('crypto');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const mongoose = this.mongoose;

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	}

	const getList = (criteria, callback) => {
		Boilerplate.find(criteria, callback);

	}

	const putItem = function(id, inData, callback) {
		Boilerplate.update({
			_id: id
		}, inData, {}, callback);
	}

	const postItem = function(inData, callback) {
		var item = new Boilerplate(inData);
		item.save(callback);
	}

	const deleteItem = function(id, callback) {
		Boilerplate.remove({
			_id: id
		}, callback);
	}

	//API ENDPOINTS ====================================
	let route;

	route = new RegExp('boilerplate$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.get(route, (req, res, next) => {

		getList({}, (err, users) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (boilerplate.get())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: users
				});
			}
		});

	});

	route = new RegExp('boilerplate/(.*)$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.put(route, (req, res, next) => {

		putItem(req.params[0], req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (boilerplate.put())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	route = new RegExp('boilerplate$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.post(route, (req, res, next) => {

		postItem(req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (boilerplate.post())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: [result]
				});
			}
		});

	});

	route = new RegExp('boilerplate/(.*)$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.delete(route, (req, res, next) => {

		deleteItem(req.params[0], (err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (boilerplate.delete())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	route = new RegExp('boilerplate/reinitialize/(.*)$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.get(route, (req, res, next) => {
		initDb.initializeDb((err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (boilerplate.reinitialize()) '+err,
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	//INITIALIZATION ====================================

	const boilerplateSchema = mongoose.Schema({
		shortName: String,
		refId: String,
		title: String,
		debugDataVersion: String,
		diagnoses: [
			{
				refId: String,
				nursingDiagnosis: String,
				goals: String,
				interventions: String,
				outcomes: String,
				shortName: String,
				includeByDefault:Boolean
			}
		]
	},
	{
	  timestamps: true
	});

	const Boilerplate = mongoose.model('Boilerplate', boilerplateSchema);

	const initDbGen = require('boilerplate-test-db');
	const initDb = new initDbGen({
		model: Boilerplate,
		dbName: 'boilerplate',
		config:this.config
	});

	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

