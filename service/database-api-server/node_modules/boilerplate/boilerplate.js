'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
//const crypt=require('crypto');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const mongoose = this.mongoose;

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	}

	this.getList = (criteria, callback) => {
		Boilerplate.find(criteria, callback);

	}
	
	this.put=function(id, inData, callback){
		

		Boilerplate.update({_id:id}, inData, {}, callback);

	}

	//API ENDPOINTS ====================================
	let route;
	
	route = new RegExp('boilerplate$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.get(route, (req, res, next) => {

		this.getList({}, (err, users) => {
			if (err) {
					next({
						code: '500',
						message: 'Database access problem (boilerplate.get())',
						err:err
					});
			} else {
				res.json({token:this.permissionMaster.updateToken(req), data:users});
			}
		});

	});

	route = new RegExp('boilerplate/(.*)$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.put(route, (req, res, next) => {
	
		this.put(req.params[0], req.body, (err, result) => {
			if (err) {
					next({
						code: '500',
						message: 'Database access problem (boilerplate.put())',
						err:err
					});
			} else {
				res.json({token:this.permissionMaster.updateToken(req), data:result});
			}
		});

	});

	this.router.post(/user/, (req, res, next) => {

		res.set({
			'content-type': 'application/json;charset=ISO-8859-1',
			messageid: qtools.newGuid(),
			messagetype: 'RESPONSE',
			responsesource: 'utilityServer',
			connection: 'Close'
		});

		res.json({
			status: `CONNECTIVITY ESTABLISHED FROM ${this.config.system.name}/${this.config.user}${req.path} GET`,
			headers: req.headers,
			body: req.body,
			query: req.query
		});
	});

	//INITIALIZATION ====================================

	const boilerplateSchema = mongoose.Schema({
		shortName: String,
		title: String,
		debugDataVersion: String,
		diagnoses:[
				{
					nursingDiagnosis:String,
					goals:String,
					interventions:String,
					outcomes:String,
					shortName:String
				}
				]
	});

	boilerplateSchema.methods.speak = function() {
		const greeting = this.name
			? "Meow name is " + this.name
			: "I don't have a name";
		console.log(greeting);
	}

	const Boilerplate = mongoose.model('Boilerplate', boilerplateSchema);

	const debugDataList = [
		{
			shortName: 'condition1',
			title: 'Condition Number One',
			diagnoses:[
				{
					nursingDiagnosis:"nursingDiagnosis 1.1",
					goals:"goals 1.1",
					interventions:"interventions 1.1",
					outcomes:"outcomes 1.1",
					shortName:"shortName 1.1"
				},
				{
					nursingDiagnosis:"nursingDiagnosis 1.2",
					goals:"goals 1.2",
					interventions:"interventions 1.2",
					outcomes:"outcomes 1.2",
					shortName:"shortName 1.2"
				}
			
			]
		},
		{
			shortName: 'condition2',
			title: 'Condition Number Two',
			diagnoses:[
				{
					nursingDiagnosis:"nursingDiagnosis 2.1",
					goals:"goals 2.1",
					interventions:"interventions 2.1",
					outcomes:"outcomes 2.1",
					shortName:"shortName 2.1"
				},
				{
					nursingDiagnosis:"nursingDiagnosis 2.2",
					goals:"goals 2.2",
					interventions:"interventions 2.2",
					outcomes:"outcomes 2.2",
					shortName:"shortName 2.2"
				}
			
			]
		},
		{
			shortName: 'condition3',
			title: 'Condition Number Three',
			diagnoses:[
				{
					nursingDiagnosis:"nursingDiagnosis 3.1",
					goals:"goals 3.1",
					interventions:"interventions 3.1",
					outcomes:"outcomes 3.1",
					shortName:"shortName 3.1"
				},
				{
					nursingDiagnosis:"nursingDiagnosis 3.2",
					goals:"goals 3.2",
					interventions:"interventions 3.2",
					outcomes:"outcomes 3.2",
					shortName:"shortName 3.2"
				}
			
			]
		},
		{
			shortName: 'condition4',
			title: 'Condition Number Four',
			diagnoses:[
				{
					nursingDiagnosis:"nursingDiagnosis 4.1",
					goals:"goals 4.1",
					interventions:"interventions 4.1",
					outcomes:"outcomes 4.1",
					shortName:"shortName 4.1"
				},
				{
					nursingDiagnosis:"nursingDiagnosis 4.2",
					goals:"goals 4.2",
					interventions:"interventions 4.2",
					outcomes:"outcomes 4.2",
					shortName:"shortName 4.2"
				}
			
			]
		},
	];
	const debugDataVersion = 123;

	let debugDataInx = 0;
	let userData = {};

	const addBoilerplate = () => {

		var user = new Boilerplate(debugDataList[debugDataInx]);

		debugDataInx = debugDataInx + 1;

		user.save((err, result) => {
			if (err) {
				return console.error(err);
			}
			if (debugDataInx < debugDataList.length) {
				setTimeout(addBoilerplate, 100);
			}
		});

	}
	
	Boilerplate.find({
		debugDataVersion: debugDataVersion
	}, (err, result) => {
		if (!result.length) {
			console.log('Clearing boilerplate database');
			Boilerplate.remove({}, (err, result) => {
				var tmp = new Boilerplate({
					debugDataVersion: debugDataVersion
				});
				tmp.save(() => {
					console.log('updated debugDataVersion to ' + debugDataVersion);
				});
				Boilerplate.count((err, result) => {
					console.log('INITIALIZING: TEST BOLIERPLATE');
					addBoilerplate();
				});
			});
		} else {
			console.log('test boilerplate is in place');
		}
	});

	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

