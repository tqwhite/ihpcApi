'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(
			`
		shutting down ${__dirname}`
		);
		callback('', message);
	};

	//API ENDPOINTS ====================================

	let route;
	let method;

	route = new RegExp('session/keepAlive$');
	method = 'get';
	this.permissionMaster.addRoute(method, route, 'nurse editor admin');
	this.router[method](route, (req, res, next) => {
		res.json({
			token: this.permissionMaster.updateToken(req),
			data: {}
		});
	});

	route = new RegExp('session$');
	method = 'post';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {
		const userName = qtools.getSurePath(req, 'body.user.username');
		const password = qtools.getSurePath(req, 'body.user.password');
		const updateSubscriptionToken = qtools.getSurePath(
			req,
			'body.updateSubscriptionToken'
		);

		if (userName) {
			this.apiManager.getApi('databaseApiServer.bookNumbers.users.getList')(
				{
					username: userName.toLowerCase()
				},
				(err, users) => {
					if (err) {
						next({
							code: '500',
							errorText: err
						});
						return;
					}
					if (!users || !users[0]) {
						next({
							code: '401',
							errorText: `User name ${userName} not found`
						});
						return;
					}
					if (!users[0].role) {
						next({
							code: '401',
							errorText: "User's Role is not Supported"
						});
						return;
					}
					if (!users[0].isActive) {
						next({
							code: '401',
							errorText: 'User is not active'
						});
						return;
					}
					if (!users[0].pwhash) {
						next({
							code: '401',
							errorText: 'Invalid User Name or Password'
						});
						return;
					}
					if (
						!users.length ||
						users[0].pwhash != qtools.passwordHash(password, users[0].salt)
					) {
						next({
							code: '401',
							errorText: 'Invalid User Name or Password'
						});
						return;
					}

					const calcDefaultSubscription = baseDate => {
						var date = new Date(baseDate);
						var nextDate = date.getDate() + 365;

						// 						var date = new Date();
						// 						var nextDate = date.getDate() -10;

						date.setDate(nextDate);
						var newDate = date.toLocaleString();
						return newDate;
					};

					const wrapItUp = () => {
						this.apiManager.getApi(
							'databaseApiServer.bookNumbers.users.setLastLogin'
						)(users[0]._id, () => {
							//remember that the token is updated by permissionMaster.js on subsequent cycles
							const role = users[0].role;
							const defaultDate = calcDefaultSubscription();
							const claims = {
								userRefId: users[0].refId,
								lastDayInSubscription: users[0].lastDayInSubscription
									? users[0].lastDayInSubscription
									: calcDefaultSubscription(users[0].createdAt),
								databaseName: this.config.database.displayName,
								_id: users[0]._id
							};
							res.json({
								token: this.permissionMaster.getToken(role, claims),
								data: users
							});
						});
					};

					if (updateSubscriptionToken) {
						this.apiManager.getApi('databaseApiServer.bookNumbers.users.updateSubscription')(
							users[0],
							updateSubscriptionToken,
							(err, result) => {
								if (err) {
									next({
										code: '401',
										errorText: err.errmsg
									});
									return;
								}
								wrapItUp();
							}
						);
					} else {
						wrapItUp();
					}
				}
			);
		} else {
			next({
				code: 404,
				errorText: 'Invalid User Name or Password'
			});
		}
	});
	//INITIALIZATION ====================================
	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();
