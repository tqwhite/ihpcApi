'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`
		shutting down ${__dirname}`);
		callback('', message);
	}

	//API ENDPOINTS ====================================

	let route;
	let method;
	route = new RegExp('session$');
	method='post';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {
		const userName = qtools.getSurePath(req, 'body.user.username');
		const password = qtools.getSurePath(req, 'body.user.password');



		if (userName) {
			this.apiManager.getApi('databaseApiServer.bookNumbers.users.getList')({
				username: userName.toLowerCase()
			}, (err, users) => {				
			
				if (err) {

					next({
						code: '500',
						errorText: err
					});
					return
				}	
				if (!users || !users[0]) {

					next({
						code: '401',
						errorText: `User name ${userName} not found`
					});
					return
				}	
				if (!users[0].role) {

					next({
						code: '401',
						errorText: "User's Role is not Supported"
					});
					return
				}
				if (!users[0].isActive) {

					next({
						code: '401',
						errorText: 'User is not active'
					});
					return
				}
				if (!users[0].pwhash) {

					next({
						code: '401',
						errorText: 'Invalid User Name or Password'
					});
					return
				} 
				if (!users.length || users[0].pwhash != qtools.passwordHash(password)) {

					next({
						code: '401',
						errorText: 'Invalid User Name or Password'
					});
					return
				}
				
				this.apiManager.getApi('databaseApiServer.bookNumbers.users.setLastLogin')(
					users[0]._id,
					()=>{
						res.json({token:this.permissionMaster.getToken(users[0]), data:users});
					}
				)
				
			});

		} else {
			next({
				code: 404,
				errorText: "Invalid User Name or Password"
			});
		}
	});
	//INITIALIZATION ====================================
	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

