'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'usersModel',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`
		shutting down ${__dirname}`);
		callback('', message);
	}

	//API ENDPOINTS ====================================

	let route = new RegExp('session$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.post(route, (req, res, next) => {
		const userName = qtools.getSurePath(req, 'body.user.username');
		const password = qtools.getSurePath(req, 'body.user.password');

		if (userName) {
			this.usersModel.getList({
				username: userName
			}, (err, users) => {

				if (err || !users.length || users[0].pwhash != qtools.passwordHash(password)) {

					next({
						code: '401',
						message: 'Invalid User Name or Password'
					});

				} else {
					res.json({token:this.permissionMaster.getToken(users[0]), data:users});
				}
			});

		} else {
			next({
				code: 404,
				message: "Invalid User Name or Password"
			});
		}
	});
	//INITIALIZATION ====================================
	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

