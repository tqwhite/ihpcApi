'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(
			`
		shutting down ${__dirname}`
		);
		callback('', message);
	};

	//API ENDPOINTS ====================================

	let route;
	let method;

	route = new RegExp('session/keepAlive$');
	method = 'get';
	this.permissionMaster.addRoute(method, route, 'nurse editor admin');
	this.router[method](route, (req, res, next) => {
		res.json({
			token: this.permissionMaster.updateToken(req),
			data: {}
		});
	});

	route = new RegExp('session$');
	method = 'post';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {
		const userName = qtools.getSurePath(req, 'body.user.username');
		const password = qtools.getSurePath(req, 'body.user.password');
		const updateSubscriptionToken = qtools.getSurePath(
			req,
			'body.updateSubscriptionToken'
		);

		const sendUserSession = (users, metaData) => {
			//remember that the token is updated by permissionMaster.js on subsequent cycles
			const role = users.role;
			const claims = {
				userRefId: users.refId,
				lastDayInSubscription: users.lastDayInSubscription,
				databaseName: this.config.database.displayName,
				_id: users._id
			};

			res.json({
				token: this.permissionMaster.getToken(role, claims),
				data: {
					users: users,
					transfersRecipient:users.transfersRecipient, //transfers are not forwarded by user model json converter
					transfersSender:users.transfersSender, //transfers are not forwarded by user model json converter
					metaData: metaData,
					configuration: this.config.userInterface
				}
			});
		};

		if (userName) {
			this.apiManager.getApi('databaseApiServer.bookNumbers.users.getUserComplete')(
				{
					username: userName.toLowerCase()
				},
				(err, users) => {


					if (err) {
						next({
							code: '500',
							errorText: err
						});
						return;
					}
					if (!users) {
						next({
							code: '401',
							errorText: `User name ${userName} not found`
						});
						return;
					}
					if (!users.role) {
						next({
							code: '401',
							errorText: "User's Role is not Supported"
						});
						return;
					}
					if (!users.isActive) {
						next({
							code: '401',
							errorText: 'User is not active'
						});
						return;
					}
					if (!users.pwhash) {
						next({
							code: '401',
							errorText: 'Invalid User Name or Password'
						});
						return;
					}
					if (
						users.pwhash != qtools.passwordHash(password, users.salt)
					) {
						next({
							code: '401',
							errorText: 'Invalid User Name or Password'
						});
						return;
					}

					const wrapItUp = (users, result) => {




						this.apiManager.getApi(
							'databaseApiServer.bookNumbers.users.setLastLogin'
						)(users._id, () => {
							if (result && result.months) {

								this.apiManager.getApi(
									'databaseApiServer.bookNumbers.users.getUserComplete'
								)(
									{
										username: users.username.toLowerCase()
									},
									(err, users) => {
										sendUserSession(users, {updateSubscriptionResult:result});
									}
								);
							} else {
								sendUserSession(users, '');
							}
						});
					};

					if (updateSubscriptionToken) {
						this.apiManager.getApi(
							'databaseApiServer.bookNumbers.users.updateSubscription'
						)(users, updateSubscriptionToken, (err, result) => {


							if (err) {
								next({
									code: '401',
									errorText: err.errMsg
								});
								return;
							}
							wrapItUp(users, result);
						});
					} else {
						wrapItUp(users);
					}
				}
			);
		} else {
			next({
				code: 404,
				errorText: 'Invalid User Name or Password'
			});
		}
	});
	//INITIALIZATION ====================================
	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();
