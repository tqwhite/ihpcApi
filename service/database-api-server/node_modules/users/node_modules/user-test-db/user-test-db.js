'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'model',
				optional: false
			},
			{
				name: 'dbName',
				optional: false
			},
			{
				name: 'callback',
				optional: true
			},
			{
				name: 'permissionMaster',
				optional: true
			},
			{
				name: 'config',
				optional: true
			}
		]
	});
	
	if (!this.callback){
		this.callback=()=>{
			console.log(`${this.dbName} init has run`);
		}
	}

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	const startSystem = (callback) => {
		this.model.find({
			debugDataVersion: debugDataVersion
		}, (err, result) => {
			if (!result.length) {
			this.initializeDb(callback);
			} else {
				console.log(`test ${this.dbName} is in place`);
			}
		});
	};

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`
shutting down ${__dirname}`);
		callback('', message);
	}

	//API ENDPOINTS ====================================

	//INITIALIZATION ====================================
	
	const debugDataVersion = 145;

/*

	Major Hackery: DoneJs has soome screwy problem with it's two-way binding. 
	New fields that are basic types need to be added to:
		sunriseUi/system/code/service/sr-careplanner/src/setup/setup.js
	or they won't be saved when the user edits his or her profile. tqii

*/


let debugDataList = [
		{
			refId: 'tqwhite',
			first: 'TQ',
			last: 'White IIx',
			username: 'tqwhite',
			emailAddress: 'tq@justkidding.com',
			pwhash: qtools.passwordHash('test'),
			role: this.permissionMaster.getRole('admin').name,
			isActive:true,
			dictionary:[
					{
						pattern:'district',
						replacement:'District',
						mandatory:true
					},
					{
						pattern:'writtenby',
						replacement:'Written By',
						mandatory:true
					}
				]
		},
		{
			refId: 'extra',
			first: 'Extra',
			last: 'User',
			emailAddress: 'tq@tqwhite.com',
			username: 'extra',
			pwhash: qtools.passwordHash('test'),
			role: this.permissionMaster.getRole('admin').name
		}
	];


	let debugDataInx = 0;
	let userData = {};

	const addDocument = (callback) => {
		var user = new this.model(debugDataList[debugDataInx]);
		debugDataInx = debugDataInx + 1;
		user.save((err, result) => {
			if (err) {
				return console.error(err);
			}
			if (debugDataInx < debugDataList.length) {
				setTimeout(addDocument, 100, callback);
			}
			else{
				if (callback){
					callback(err, result);
				}
			}
		});

	}
	this.initializeDb=(callback)=>{
		console.log('user-test-db forced to NEVER RUN');
		if (!this.config || !this.config.database || this.config.database.allowReinit != 'true') {
			callback(`database re-init not allowed for ${this.dbName} on this server`);
			return;
		}
		
		debugDataInx=0;
			console.log(`Clearing ${this.dbName} database`);
			this.model.remove({}, (err, result) => {
				var tmp = new this.model({
					debugDataVersion: debugDataVersion
				});
				tmp.save(() => {
					console.log('updated debugDataVersion to ' + debugDataVersion);
				});
				this.model.count((err, result) => {
					console.log(`INITIALIZING: TEST ${this.dbName.toUpperCase()}`);
					addDocument(callback);
				});
			});
		
		};

	startSystem(this.callback);
	
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

