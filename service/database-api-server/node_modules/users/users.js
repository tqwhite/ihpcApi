'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
//const crypt=require('crypto');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const mongoose = this.mongoose;

	//LOCAL FUNCTIONS ====================================

	const getList = (criteria, callback) => {
		User.find(criteria, callback);

	}

	const putItem = function(id, inData, callback) {
		User.update({
			_id: id
		}, inData, {}, callback);
	}

	const postItem = function(inData, callback) {
		var item = new User(inData);
		item.save(callback);
	}

	const deleteItem = function(id, callback) {
		User.remove({
			_id: id
		}, callback);
	}

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	}
	
	this.getList=getList;

	//API ENDPOINTS ====================================

	let route = new RegExp('user$');
	this.permissionMaster.addRoute(route, 'admin editor');

	this.router.get(route, (req, res, next) => {
		getList({}, (err, users) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (users.get())'
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: users
				});
			}
		});

	});

	route = new RegExp('user/(.*)$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.put(route, (req, res, next) => {

		putItem(req.params[0], req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (user.put())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	route = new RegExp('user$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.post(route, (req, res, next) => {

		postItem(req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (user.post())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: [result]
				});
			}
		});

	});

	route = new RegExp('user/(.*)$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.delete(route, (req, res, next) => {
	
		next({
			code: '500',
			message: 'Deleting is not allowed at present (user.delete())',
			err: err
		});
		return;
		//=====================
		deleteItem(req.params[0], (err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (user.delete())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});


	route = new RegExp('user/reinitialize/(.*)$');
	this.permissionMaster.addRoute(route, 'all');
	this.router.get(route, (req, res, next) => {
		initDb.initializeDb((err, result) => {
			if (err) {
				next({
					code: '500',
					message: 'Database access problem (boilerplate.reinitialize()) '+err,
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});

	});

	//INITIALIZATION ====================================

	const userSchema = mongoose.Schema({
		refId: String,
		first: String,
		last: String,
		username: String,
		pwhash: String,
		role: String,
		debugDataVersion: String
	});

	userSchema.methods.speak = function() {
		const greeting = this.name
			? "Meow name is " + this.name
			: "I don't have a name";
		console.log(greeting);
	}

	const User = mongoose.model('User', userSchema);

	const initDbGen = require('user-test-db');
	const initDb = new initDbGen({
		model: User,
		dbName: 'user',
		permissionMaster: this.permissionMaster,
		config:this.config
	});

	this.initCallback();
	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

