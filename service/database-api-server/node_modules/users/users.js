'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
//const crypt=require('crypto');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================
	const mongoose = this.mongoose;

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	}
	
	this.get=(criteria, callback)=>{
	

		User.find(criteria, callback);
		
	}

	//API ENDPOINTS ====================================
	

	this.router.get(/user\/users$/, (req, res, next) => {

		res.set({
			'content-type': 'application/json;charset=ISO-8859-1',
			messageid: qtools.newGuid(),
			messagetype: 'RESPONSE',
			responsesource: 'utilityServer',
			connection: 'Close'
		});

		this.get({}, (err, users) => {
			if (err) {
				res.status(404).send(JSON.stringify({
					message : err
				}));
			}
			else{
				res.json(users);
			}
		});

	});

	this.router.post(/user/, (req, res, next) => {

		res.set({
			'content-type': 'application/json;charset=ISO-8859-1',
			messageid: qtools.newGuid(),
			messagetype: 'RESPONSE',
			responsesource: 'utilityServer',
			connection: 'Close'
		});

		res.json({
			status: `CONNECTIVITY ESTABLISHED FROM ${this.config.system.name}/${this.config.user}${req.path} GET`,
			headers: req.headers,
			body: req.body,
			query: req.query
		});
	});

	//INITIALIZATION ====================================

	const userSchema = mongoose.Schema({
		first: String,
		last: String,
		username: String,
		pwhash: String,
		role: String
	});

	userSchema.methods.speak = function() {
		const greeting = this.name
			? "Meow name is " + this.name
			: "I don't have a name";
		console.log(greeting);
	}

	const User = mongoose.model('User', userSchema);

	const nameList = ['Yoko Hagstrom  ',
		'Shanika Redinger  ',
		'Belle Steenbergen  ',
		'Lottie Correia  ',
		'Denae Meltzer  ',
		'Maryam Goodfellow  ',
		'Leeanne Alessi  ',
		'Tomoko Bufford  ',
		'Willia Niswonger  ',
		'Mabel Sardina  ',
		'Caitlin Raye  ',
		'Joan Pauly  ',
		'Clara Crotts  ',
		'Berenice Grubaugh  ',
		'Javier Pfeiffer  ',
		'Jule Gardener  ',
		'Kimberley Halliburton  ',
		'Florentino Bastarache  ',
		'Colton Linneman  ',
		'Herma Rawlins  '
	];
	let nameInx = 0;
	let nameSplit = [];
	let userData = {};

	const addUser = () => {
		nameSplit = nameList[nameInx].split(' ');
		userData.first = nameSplit[0];
		userData.last = nameSplit[1];
		userData.username = nameSplit[0] + nameSplit[1];
		userData.pwhash = qtools.passwordHash(nameSplit[0] + nameSplit[1]);
		userData.role = 'editor'; //user, editor, admin. each implies the previous, ie, all admins are editors, everyone is a user

		var user = new User(userData);

		nameInx = nameInx + 1;

		user.save((err, result) => {
			if (err) {
				return console.error(err);
			}
			if (nameInx < nameList.length) {
				setTimeout(addUser, 100);
			}
		});

	}

	User.count((err, result) => {
		if (result < nameList.length) {
			console.log('INITIALIZING: TEST USERS');
			addUser();
		} else {
			console.log('test users are in place');
		}

	});

	console.log(__dirname);

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

