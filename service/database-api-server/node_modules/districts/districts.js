'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module, { updatePrototypes: true });
const async = require('async');
const asynchronousPipe = require('asynchronous-pipe');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'mongoose',
				optional: false
			},
			{
				name: 'permissionMaster',
				optional: false
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================
	
	const saveDistrictList = (inData, callback) => {
		const taskList = [];
		taskList.push((args, next) => {
			const { inData } = args;
			const localCallback = (err, incumbentDbObject) => {
				incumbentDbObject = incumbentDbObject ? incumbentDbObject : {};

				next(err, { ...args, incumbentDbObject });
			};
			District.findOne(
				{
					refId: inData.refId
				},
				localCallback
			);
		});

		taskList.push((args, next) => {
			let { incumbentDbObject, inData } = args;
			const localCallback = (err, updateDistrictRec) => {
				next(err, { ...args, updateDistrictRec });
			};

			const { _id } = incumbentDbObject;

			console.log(
				`\n=-=============   incumbentDbObject  ========================= [districts.js.moduleFunction]\n`
			);
			
			console.dir(
				{
					['incumbentDbObject']: incumbentDbObject
						? incumbentDbObject
						: {}.toObject()
				},
				{ showHidden: false, depth: 2, colors: true }
			);

			console.log(
				`\n=-=============   incumbentDbObject  ========================= [districts.js.moduleFunction]\n`
			);
			
			delete inData.createdAt;
			delete inData.updatedAt;

			District.update(
				{ _id },
				inData,
				{ upsert: true, setDefaultsOnInsert: true },
				localCallback
			);
		});
		const initialData = { inData: inData };
		asynchronousPipe(taskList, initialData, (err, finalResult) => {
			callback(err, finalResult.updateDistrictRec);
		});
	};

	

	const putItem = function(id, inData, callback) {
		delete inData.createdAt;
		delete inData.updatedAt;
console.log(`\n=-=============   inData  ========================= [districts.js.putItem]\n`);


console.dir({['inData']:inData}, { showHidden: false, depth: 2, colors: true });

console.log(`\n=-=============   inData  ========================= [districts.js.putItem]\n`);

		const localCallback = (err, result) => {
		
console.dir({['err']:err}, { showHidden: false, depth: 2, colors: true });
console.dir({['result']:result}, { showHidden: false, depth: 2, colors: true });


console.log(`id=${id}`);

			callback('', result);
		};



		District.update(
			{
				_id: id
			},
			inData,
			{},
			localCallback
		);
	};

	const postItem = function(inData, callback) {
		var item = new District(inData);
		item.save(callback);
	};
	
	//INITIALIZATION ====================================

	!this.initCallback || this.initCallback();

	//ECOSYSTEM REQUIREMENTS ====================================

	const ping = (message = 'NO MESSAGE SUPPLIED') => {
		return `${qtools.ping().employer} got the ${message}`;
	};

	this.ping = ping;

	this.shutdown = (message, callback) => {
		console.log(`\nshutting down ${qtools.ping().employer}`);
		callback('', message);
	};

	//API ENDPOINTS ====================================
	//REMEMBER: 'sessions' conducts login.

	let route;
	let method;
	
	// ------------------------------------------------------------------
	// GET DISTRICT INFO
	
	const getSsoInfo = (req, res, next) => {
		if (req.param[0] && req.tokenJwtDecoded._id !== req.param[0]) {
			next({
				code: '401',
				errorText: 'Unauthorized request'
			});
			return;
		}

		const districtId = req.query.districtId;
		const taskList = [];

		taskList.push((args, next) => {
			const { districtId } = args;
			const localCallback = (err, incumbentDbObject) => {
				incumbentDbObject = incumbentDbObject ? incumbentDbObject : {};
				next(err, { ...args, incumbentDbObject });
			};
			District.findOne(
				{
					districtId
				},
				localCallback
			);
		});

		const initialData = { districtId };
		asynchronousPipe(taskList, initialData, (err, args) => {
			const { incumbentDbObject } = args;
			const { districtId } = incumbentDbObject;
			if (!districtId) {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: []
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: [incumbentDbObject.toObject()]
				});
			}
			//callback(err, {localResult1Value, localResult2});
		});
	};
	
	const getDistrictList = (req, res, next) => {
		if (req.param[0] && req.tokenJwtDecoded._id !== req.param[0]) {
			next({
				code: '401',
				errorText: 'Unauthorized request'
			});
			return;
		}

		const taskList = [];

		taskList.push((args, next) => {
			const { districtId } = args;
			const localCallback = (err, incumbentDbObject) => {
				incumbentDbObject = incumbentDbObject ? incumbentDbObject : {};
				next(err, { ...args, incumbentDbObject });
			};
			District.find({}, localCallback);
		});

		const initialData = {};
		asynchronousPipe(taskList, initialData, (err, args) => {
			const { incumbentDbObject } = args;

			res.json({
				token: this.permissionMaster.updateToken(req),
				data: incumbentDbObject
			});
		});
	};
	
	// ------------------------------------------------------------------
	// GET
	
	route = new RegExp('districtSso');
	method = 'get';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, getSsoInfo);
	
	
	
	route = new RegExp('district');
	method = 'get';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, getDistrictList);
	
	// ------------------------------------------------------------------
	// SAVE
	
	
	route = new RegExp('district/(.*)$');
	method = 'put';
	this.permissionMaster.addRoute(method, route, 'admin editor nurse');
	this.router[method](route, (req, res, next) => {
		putItem(req.params[0], req.body, (err, result) => {
			if (err) {
				next({
					code: '500',
					errorText: 'Database access problem (district.put())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: result
				});
			}
		});
	});



	route = new RegExp('/district'); //remember post does not take a parameter
	method = 'post';
	this.permissionMaster.addRoute(method, route, 'all');
	this.router[method](route, (req, res, next) => {
		postItem(req.body, (err, result) => {
			if (err) {
				asyncNext({
					code: '500',
					errorText: 'Database access problem (district.post())',
					err: err
				});
			} else {
				res.json({
					token: this.permissionMaster.updateToken(req),
					data: [result]
				});
			}
		});
	})

	//SCHEMA ====================================

	const mongoose = this.mongoose;
	const districtSchema = mongoose.Schema(
		{
			active: Boolean,
			displayName: String,
			districtId: String,
			refId: String,
			ssoParameters: {
				redirectUrl: String,
				validationUrl: String,
				validationSpecs: {
					placehold: String
				}
			}
		},
		{
			timestamps: true
		}
	);
	//districtSchema.index({ refId: 1, unique: true });

	districtSchema.methods.speak = function() {
		const greeting = this.name
			? 'Meow name is ' + this.name
			: "I don't have a name";
		console.log(greeting);
	};

	districtSchema.methods.toJSON = function() {
		const obj = this.toObject();
		//delete obj.pwhash;
		return obj;
		//thanks Charles
		//http://stackoverflow.com/questions/11160955/how-to-exclude-some-fields-from-the-document
	};

	districtSchema.set('toObject', { virtuals: true });

	districtSchema.set('toJSON', { virtuals: true });

	const District = mongoose.model('District', districtSchema);

	return this;
};
//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

