'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			}
		]
	});

	qtools.validateProperties({
		subject: this.config || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'roleList',
				optional: false
			}
		]
	});

	this.routeList = [];

	//LOCAL VARIABLES ====================================

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================

	this.shutdown = (message, callback) => {
		console.log(`shutting down ${__dirname}`);
		callback('', message);
	}

	this.getRole = (name, callback) => {
		const role = qtools.getByProperty(this.roleList, 'name', name);
		if (!role) {
			if (callback) {
				callback(`no such role as $(roleName) in configuration`);
			} else {
				throw `no such role as $(roleName) in configuration`;
			}
		} else {
			if (callback) {
				callback('', role);
			} else {
				return role;
			}
		}
	}

	this.addRoute = (route, role, callback) => {
		this.routeList.push({
			route: route,
			role: role
		});
	}

	const getByPath = (path) => {
		for (var i = 0, len = this.routeList.length; i < len; i++) {
			var element = this.routeList[i];
			if (path.match(element.route)) {
				return element;
			}
		}
		return {};
	}

	const validUsage = (req) => {
		const routeItem = getByPath(req.path);
		if (routeItem.role == 'all') {
			return true;
		} else {
			return req.token.role == routeItem.role;
		}
	}

	this.checkPath = (req, res, next) => {

		if (validUsage(req)) {
			next();
		} else {
			next({
				code: '401',
				message: 'Invalid Session Token'
			});
		}


	}

	//API ENDPOINTS ====================================

	//INITIALIZATION ====================================

	console.log(__dirname);

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

