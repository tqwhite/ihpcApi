'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'database',
				optional: false
			},
			{
				name: 'apiManager',
				optional: false
			},
			{
				name: 'initCallback',
				optional: true
			}
		]
	});

	//LOCAL VARIABLES ====================================

	let workerList = {};

	//LOCAL FUNCTIONS ====================================
	const validateOffset = offset => {
		let invalidCriterionMessage;
		if (isNaN(+offset)) {
			invalidCriterionMessage = `'${offset}' is not a number`;
		}
		return invalidCriterionMessage;
	};
	const generateOffsetQuery = (propertyName, offset) => {
		const workingDate = dateOfOffsetFromToday(offset);

		const month = workingDate.getMonth();
		const day = workingDate.getDate();
		const year = workingDate.getFullYear();

		const earlierDate = new Date(year, month, day); //sets time of day to midnight (query is gte, ie, inclusive)
		const laterDate = new Date(year, month, day + 1); //sets time of day to midnight the day after

		const query = {
			$and: [
				{ [propertyName]: { $gt: earlierDate } },
				{ [propertyName]: { $lte: laterDate } }
			]
		};
		return query;
	};

	const lessThanMonths = (x = 1) => {
		const workingDate = new Date();

		const nextDate = workingDate.getMonth() + x;

		workingDate.setMonth(nextDate);
		const query = {
			lastDayInSubscription: {
				$lt: workingDate
			}
		};

		return query;
	};

	const dateOfOffsetFromToday = dayOffset => {
		const workingDate = new Date();
		const day = workingDate.getDate();
		workingDate.setDate(day + dayOffset);
		return workingDate;
	};

	const exactDaysUntilExpire = (criterion, control) => {
		if (control == 'validate') {
			return validateOffset(criterion.offset);
		}
		return generateOffsetQuery('lastDayInSubscription', criterion.offset);
	};

	const exactDaysAfterCreated = (criterion, control) => {
		if (control == 'validate') {
			return validateOffset(criterion.offset);
		}
		return generateOffsetQuery('createdAt', -1 * criterion.offset);
	};

	const queryMap = {
		lastDayInSubscription: exactDaysUntilExpire,
		createdAt: exactDaysAfterCreated
	};

	const getUserList = (parameterBundle, callback) => {
		const criterion = parameterBundle.timing ? parameterBundle.timing : {};

		if (
			!queryMap[criterion.reference] ||
			queryMap[criterion.reference](criterion, 'validate')
		) {
			callback(
				`invalid criterion ${criterion.reference}/${queryMap[criterion.reference](criterion, 'validate')} in mt-collector.js`
			);
			return;
		}
		qtools.logMilestone(
			`looking for users meeting ${criterion.reference}/${+criterion.offset} in mt-collector.js`
		);

		this.apiManager.getApi(
			'databaseApiServer.bookNumbers.users.getList'
		)(queryMap[criterion.reference](criterion), (err, users) => {
			// 				users
			// 					.map(item => item.toObject())
			// 					.sort(qtools.byObjectProperty('daysSinceSubscribed'))
			// 					.forEach(user => {
			// 						console.log(
			// 							`${user.username} ${user.daysSinceSubscribed} ${user.daysLeftInSubscription}`
			// 						);
			// 					});
			// 				qtools.die();

			if (err) {
				callback({
					code: '500',
					errorText: err
				});
				return;
			}
			if (!users || !users[0]) {
				callback('', []);
				return;
			}

			callback('', users.map(user => user.toObject()));
		});
	};

	//INITIALIZATION ====================================

	if (typeof this.initCallback == 'function') {
		this.initCallback();
	}

	this.apiManager.registerApi('getUserList', getUserList);

	//SHUTDOWN FUNCTIONS ====================================

	this.shutdown = (message, callback) => {
		console.log(`\nshutting down ${__dirname}`);
		callback('', message);
	};

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();
