'use strict';
const qtoolsGen = require('qtools');
const qtools = new qtoolsGen(module);
const async = require('async');
//const later = require('later');
const multiIni = require('multi-ini');

var nodemailer = require('nodemailer');
var smtpTransport = require("nodemailer-smtp-transport");


//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			},
			{
				name: 'database',
				optional: false
			},
			{
				name: 'apiManager',
				optional: true
			},
			{
				name: 'initCallback',
				optional: false
			}
		]
	});

	//LOCAL VARIABLES ====================================

	var smtpTransport2 = nodemailer.createTransport(smtpTransport({
		host: "box.genericwhite.com",
		secureConnection: true,
		port: 587,
		auth: {
			user: "tq@genericwhite.com",
			pass: "mediaBloze!0"
		}
	}));
	//LOCAL FUNCTIONS ====================================


	const testDecipher = (encrypted) => {
		const crypto = require('crypto');
		const decipher = crypto.createDecipher('aes192', this.config.system.secret);

		var decrypted = '';
		decipher.on('readable', () => {
			var data = decipher.read();
			if (data) {
				decrypted += data.toString('utf8');
			}
		});
		decipher.on('end', () => {

			console.log("\n=-=============   =============================  =========================\n");
			console.log(encrypted);
			console.log(decrypted);
			console.log("\n=-=============   =============================  =========================\n");

		});

		decipher.write(encrypted, 'hex');
		decipher.end();
	}

	const applyTemplate = (item) => {
		const templatePath = process.env.srapiProjectPath + 'configs/emailTemplates/' + item.templateName + '.ini';

		if (!qtools.realPath(templatePath)) {
			console.log(`ERROR: no template at ${templatePath}`);
		}

		const mailConfig = multiIni.read(templatePath);

		const transformations = {};

		if (mailConfig.transformations) {
			var self = this;
			for (var i in mailConfig.transformations) {
				var element = mailConfig.transformations[i];
				transformations[i] = eval(element.replace(/\n/g, ' '));
			}
		}


		const replaceObject = item.toObject();
		const dictionary = replaceObject.dictionary ? replaceObject.dictionary : {};
		delete replaceObject.dictionary;

		for (var i = 0, len = dictionary.length; i < len; i++) {
			var element = dictionary[i];
			replaceObject[element.pattern] = element.replacement;
		}
		replaceObject.baseDomain=this.config.system.baseDomain;

		const testEncrypted = transformations.confirmationLink(replaceObject)
		testDecipher(testEncrypted);



		return {
			html: qtools.templateReplace({
				template: mailConfig.templates.html?mailConfig.templates.html:"Message from http://<!baseDomain!>",
				replaceObject: replaceObject,
				leaveUnmatchedTagsIntact: false,
				transformations: transformations
			}),
			subject: qtools.templateReplace({
				template: mailConfig.templates.subject?mailConfig.templates.subject:"Message from <!baseDomain!>",
				replaceObject: replaceObject,
				leaveUnmatchedTagsIntact: false,
				transformations: transformations
			}),
			text: qtools.templateReplace({
				template: mailConfig.templates.text?mailConfig.templates.text:"Message from http://<!baseDomain!>",
				replaceObject: replaceObject,
				leaveUnmatchedTagsIntact: false,
				transformations: transformations
			})

		};
	}

	const startSystem = () => {
		this.initCallback && this.initCallback();
		return;
	};


	const clearSentItem = (item, callback) => {
		Message.update({
			refId: item.refId
		}, {
			completionTime: new Date(),
			nextEvent: '',
		}, {}, (err, result) => {

			if (err) {
				console.dir({
					"mt-messages.addMessage.localCallback.err": err
				});
				callback(err);
				return
			}

			callback('', result);
		});
	}

	const setNextSchedule = (callback) => {
		console.log("\n=-=============   setNextSchedule  =========================\n");
		const dateCriterion = new Date();
		dateCriterion.setSeconds(+dateCriterion.getSeconds() + 1)

		Message.find({
			nextEvent: {
				$lt: dateCriterion
			}
		}, (err, result) => {
			console.dir({
				"err": err
			});
			console.dir({
				"result": result.length
			});
		});

		callback();
	}

	const sendEmail = (item, callback) => {
		const localCallback = (err, result) => {
			if (err) {
				console.log(`Email send FAILED to ${item.emailAddress} using template ${item.templateName}`);
				console.dir({
					"err": err
				});
			} else {
				console.log(`Sent email to ${result.accepted[0]} using template ${item.templateName}`);
			}
			clearSentItem(item, callback);
		}

		const messageElements = applyTemplate(item);
		
console.dir({"messageElements":messageElements});


		const mailOptions = {
			from: "tq@genericwhite.com",
			to: item.emailAddress,
			subject: messageElements.subject,
			text: messageElements.text,
			html: messageElements.html,
			attachmentsXXX: [
				{ // file on disk as an attachment
					filename: 'text3.txt',
					path: 'Your File path' // stream this file
				}
			]
		}

			smtpTransport2.sendMail(mailOptions, localCallback);
	}

	//METHODS AND PROPERTIES ====================================

	//API ENDPOINTS ====================================

	const addMessage = (args, callback) => {

		const {emailAddress, schedule, templateName, dictionary} = args;
		const newMessage = Object.assign({}, args);
		newMessage.refId = qtools.newGuid();
		if (newMessage.schedule == 'now') {
			newMessage.nextEvent = new Date();
		}

		callback = callback ? callback : (err) => {
			console.log('wrote')
			if (err) {
				console.dir({
					"err": err
				});


			}
		};

		const localCallback = (err, result) => {

			if (err) {
				console.dir({
					"mt-messages.addMessage.localCallback.err": err
				});
				callback(err);
				return
			}

			if (result.schedule == 'now') {
				sendEmail(result, callback);
			} else {
				setNextSchedule(callback);
			}

		}

		new Message(newMessage).save(localCallback);

		return true;
	}

	//INITIALIZATION ====================================

	this.apiManager.registerApi('addMessage', addMessage);

	const messageSchema = this.database.Schema({
		refId: {
			type: String,
			unique: true
		},
		schedule: String,
		nextEvent: Date,
		clientRefId: String,
		templateName: String,
		emailAddress: String,
		completionTime: Date,
		dictionary: [
			{
				pattern: String,
				replacement: String
			}
		]

	});
	const Message = this.database.model('messages', messageSchema);




	startSystem();


	//SHUTDOWN FUNCTIONS ====================================	

	this.shutdown = (message, callback) => {
		console.log(`
shutting down ${__dirname}`);
		callback('', message);
	}

	return this;
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();

